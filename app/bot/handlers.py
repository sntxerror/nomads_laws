from telegram import Update
from telegram.ext import ContextTypes
import logging

logger = logging.getLogger(__name__)

class BotHandlers:
    def __init__(self, gemini_service):
        self.gemini = gemini_service
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "üá¨üá™ –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –Ω–∞–ª–æ–≥–æ–≤—ã–º –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º –ì—Ä—É–∑–∏–∏. "
            "–ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã!"
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            user_id = update.effective_user.id
            question = update.message.text
            logger.info(f"Received question from user {user_id}: {question}")

            await update.message.chat.send_action("typing")
            answer = await self.gemini.ask_legal_question(question)
            await update.message.reply_text(answer)
            
        except Exception as e:
            logger.error(f"Error handling message: {str(e)}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å."
            )